AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Party Playlist
Parameters:
  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment
  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  AccessDynamoDBTablesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: 'AccessPlaylistsTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/playlists'
        - PolicyName: 'AccessPlaylistsIndex'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/playlists/*'
        - PolicyName: 'AccessUsersTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/users'
        - PolicyName: 'AccessSongsTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/songs'
  CreateHostLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.CreateHostLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /users
            Method: post

  AddGuestToPartyLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.AddGuestToPartyLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /users/{playlistId}
            Method: post

  GetHostLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.GetHostLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /host/{hostName}/playlists/{playlistName}
            Method: get

  GetGuestListLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.GetGuestListLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /guests/{playlistId}
            Method: get

  GetPlaylistByNameLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.GetPlaylistByNameLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /partyPlaylistName/{playlistName}
            Method: get

  GetPlaylistByIdLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.GetPlaylistByIdLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /partyPlaylistId/{playlistId}
            Method: get

  CreatePlaylistLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.CreatePlaylistLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        PartyPlaylist:
          Type: Api
          Properties:
            Path: /playlist
            Method: post

  RemoveSongFromPlaylistLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.RemoveSongFromPlaylistLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        MusicPlaylistService:
          Type: Api
          Properties:
            Path: /playlist/{playlistId}/songs
            Method: put

  AddSongToPlaylistLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.AddSongToPlaylistLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        MusicPlaylistService:
          Type: Api
          Properties:
            Path: /playlist/{playlistId}/songs
            Method: post

  AddUpvoteToSongLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: PartyPlaylist
      Handler: com.nashss.se.partyplaylist.lambda.AddUpvoteToSongLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        MusicPlaylistService:
          Type: Api
          Properties:
            Path: /playlist/{playlistId}/songs/{songId}
            Method: put

  #-----------------------------------------------------------------

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "firstName"
          AttributeType: "S"
        - AttributeName: "lastName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "firstName"
          KeyType: "HASH"
        - AttributeName: "lastName"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "users"

  PlaylistsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "playlistId"
          AttributeType: "S"
        - AttributeName: "playlistName"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "playlistId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "playlists"
      GlobalSecondaryIndexes:
        - IndexName: "PlaylistNameIndex"
          KeySchema:
            - AttributeName: "playlistName"
              KeyType: "HASH"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "host"
  InitSongsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role:
        Fn::GetAtt: [ AccessDynamoDBTablesRole , "Arn" ]
      Runtime: nodejs14.x
      Timeout: 60
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const response = require('cfn-response');
          const docClient = new AWS.DynamoDB.DocumentClient();
          exports.handler = function(event, context) {
              console.log(JSON.stringify(event,null,2));
                var params = {
                  RequestItems: {
                    "songs": [
                     {
                      PutRequest: {
                        Item: {
                          id: "01",
                          songArtist: "The Lonely Island",
                          songTitle: "I'm On A Boat",
                          genre: "Pop",
                          songLength: 156
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "02",
                          songArtist: "Smash Mouth",
                          songTitle: "All Star",
                          genre: "Alternative",
                          songLength: 200
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "03",
                          songArtist: "Rick Astley",
                          songTitle: "Never Gonna Give You Up",
                          genre: "Pop",
                          songLength: 213
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "04",
                          songArtist: "Kenny Loggins",
                          songTitle: "Danger Zone",
                          genre: "Yacht Rock",
                          songLength: 215
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "05",
                          songArtist: "Michael McDonald",
                          songTitle: "I Keep Forgettin' (Every Time You're Near)",
                          genre: "Yacht Rock",
                          songLength: 222
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "06",
                          songArtist: "Christopher Cross",
                          songTitle: "Sailing",
                          genre: "Adult Contemporary",
                          songLength: 256
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "07",
                          songArtist: "Styx",
                          songTitle: "Come Sail Away",
                          genre: "AOR",
                          songLength: 367
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "08",
                          songArtist: "Limp Bizkit" ,
                          "songTitle": "Nookie",
                          "genre": "Nu Metal",
                          songLength: 289
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "09",
                          songArtist: "Nickelback",
                          songTitle: "Photograph",
                          genre: "Hard Rock",
                          songLength: 238
                        }
                      }
                    },
                    {
                      PutRequest: {
                        Item: {
                          id: "10",
                          songArtist: "Sisqo",
                          songTitle: "Thong Song",
                          genre: "Hip-hop",
                          songLength: 233
                        }
                      }
                    }
                  ]
                 }
                };
                docClient.batchWrite(params, function(err, data) { 
                    if (err) {
                      response.send(event, context, "FAILED", {});
                    } else {
                      response.send(event, context, "SUCCESS", {});
                    }
                  }
                );
            };
  SongsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "songTitle"
          AttributeType: "S"
        - AttributeName: "songArtist"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "songArtist"
          KeyType: "HASH"
        - AttributeName: "songTitle"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "songs"
  InitializeSongs:
    Type: Custom::InitSongsFunction
    DependsOn: SongsTable
    Properties:
      ServiceToken:
        Fn::GetAtt: [ InitSongsFunction , "Arn" ]
      DynamoTableName:
        Ref: SongsTable